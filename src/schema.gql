# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Perfil {
  bio: String!
  ubicacion: String!
  celular: String!
  fechaNacimiento: DateTime!
  contacto: String!
  intereses: [String!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CursoComprado {
  cursoId: ID!
  fechaCompra: DateTime!
  fechaExpiracion: DateTime!
  estadoAcceso: String!
  progresoCursoId: String!
}

type UsuarioType {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  email_verified: Boolean!
  roles: [RolEnumGql!]!
  picture: [String!]
  perfil: Perfil!
  cursos_comprados: [CursoComprado!]!
  notificaciones: Boolean!
  isActive: Boolean!
}

"""Roles disponibles para los usuarios"""
enum RolEnumGql {
  ESTUDIANTE
  INSTRUCTOR
  EDITOR
  ADMINISTRADOR
  SUPERADMIN
}

type UserRequest {
  _id: ID!
  roles: [RolEnumGql!]!
  iat: Int
  exp: Int
  email: String!
  email_verified: Boolean!
  firstName: String!
  lastName: String!
  picture: String
}

type userAndJWT {
  user: UserRequest!
  access_token: String!
}

type CursoType {
  id: ID!
  title: String!
  descripcionCorta: String!
  nivel: String
  instructor: ID
  duracionHoras: Float
  imagenURL: String
  precio: Float
  descuentos: Float
  calificacion: Float
  aprenderas: [String!]!
  objetivos: [String!]!
  dirigidoA: [String!]!
  estructuraProgramaria: [ID!]!
  fechaLanzamiento: DateTime
  categorias: [ID!]!
}

type Query {
  cursos: [CursoType!]!
  curso(id: ID!): CursoType!

  """Obtiene una lista de usuarios, opcionalmente filtrados por roles."""
  usuarios(
    """Filtrar usuarios por roles espec√≠ficos."""
    roles: RolesEnumGql
    offset: Int = 0
    limit: Int = 10
    search: String
  ): [UsuarioType!]!

  """Obtiene un usuario por su id."""
  usuario(
    """Id del usuario a obtener."""
    id: ID!
  ): UsuarioType!
  login(uses_password: UserPasswordInput!): userAndJWT!
  revalidateToken: userAndJWT!
}

input RolesEnumGql {
  roles: [RolEnumGql!]
}

input UserPasswordInput {
  email: String!
  password: String!
}

type Mutation {
  createCurso(dto: CreateCursoInput!): CursoType!
  updateCurso(id: ID!, dto: UpdateCursoInput!): CursoType!
  deleteCurso(id: ID!): CursoType!
  updateUser(id: ID!, data: UpdateUsuarioInput): UsuarioType!
  signup(CreateUsuario: CreateUsuarioInput!): UsuarioType!
  seed: Boolean!
}

input CreateCursoInput {
  title: String!
  descripcionCorta: String!
  nivel: String
  instructor: ID
  duracionHoras: Float
  imagenURL: String
  precio: Float
  calificacion: Float
  aprenderas: [String!]! = []
  objetivos: [String!]! = []
  dirigidoA: [String!]! = []
  estructuraProgramaria: [ID!]! = []
  fechaLanzamiento: DateTime
  categorias: [ID!]! = []
}

input UpdateCursoInput {
  title: String
  descripcionCorta: String
  nivel: String
  instructor: ID
  duracionHoras: Float
  imagenURL: String
  precio: Float
  calificacion: Float
  aprenderas: [String!] = []
  objetivos: [String!] = []
  dirigidoA: [String!] = []
  estructuraProgramaria: [ID!] = []
  fechaLanzamiento: DateTime
  categorias: [ID!] = []
}

input UpdateUsuarioInput {
  firstName: String
  lastName: String
  email: String
  email_verified: Boolean = false
  password: String
  roles: [RolEnumGql!] = [ESTUDIANTE]
  perfil: CreatePerfilInput
  cursos_comprados: [CreateCursoCompradoInput!]
  notificaciones: Boolean = true
  isActive: Boolean = true
}

input CreatePerfilInput {
  bio: String!
  ubicacion: String!
  celular: String!
  fechaNacimiento: DateTime!
  imagenURL: String!
  contacto: String!
  intereses: [String!]!
}

input CreateCursoCompradoInput {
  cursoId: ID!
  fechaCompra: DateTime!
  fechaExpiracion: DateTime!
  estadoAcceso: String!
  progresoCursoId: ID!
}

input CreateUsuarioInput {
  firstName: String!
  lastName: String!
  email: String!
  email_verified: Boolean! = false
  password: String!
  roles: [RolEnumGql!]! = [ESTUDIANTE]
  perfil: CreatePerfilInput
  cursos_comprados: [CreateCursoCompradoInput!]
  notificaciones: Boolean = true
  isActive: Boolean = true
}