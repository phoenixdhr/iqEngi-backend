# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Categoria {
  _id: ID!
  nombre: String!
  descripcion: String
  deleted: Boolean!
}

type Instructor {
  _id: ID!
  firstName: String!
  lastName: String!
  profesion: String
  especializacion: [String!]!
  calificacionPromedio: Float!
  pais: String
  deleted: Boolean!
}

type Material {
  _id: ID!
  titulo: String!
  descripcion: String
  url: String!
}

type Unidad {
  _id: ID!
  moduloId: ID!
  numeroUnidad: Int!
  titulo: String!
  descripcion: String
  urlVideo: String
  materiales: [Material!]
  deleted: Boolean!
}

type Modulo {
  _id: ID!
  cursoId: ID!
  numeroModulo: Int!
  titulo: String!
  descripcion: String
  unidades: [Unidad!]
  deleted: Boolean!
}

type Opcion {
  _id: ID!
  textOpcion: String!
  esCorrecta: Boolean!
  orden: Int
  deleted: Boolean!
}

type Pregunta {
  _id: ID!
  enunciado: String!
  tipoPregunta: TipoPregunta!
  opciones: [Opcion!]
  moduloId: Modulo
  unidadId: Unidad
  deleted: Boolean!
}

"""Tipos de preguntas"""
enum TipoPregunta {
  Abierta
  Alternativa
  Opcion_multiple
  Verdadero_falso
  Ordenamiento
}

type Cuestionario {
  _id: ID!
  cursoId: Curso!
  titulo: String!
  descripcion: String
  preguntas: [Pregunta!]!
  numeroPreguntasPresentar: Int
  fechaCreacion: DateTime!
  deleted: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Curso {
  _id: ID!
  titulo: String!
  descripcionCorta: String!
  descripcionLarga: String
  nivel: Nivel
  instructor: Instructor
  duracionHoras: Float
  imagenURL: String
  precio: Float
  currency: String
  descuento: Float
  calificacionPromedio: Float!
  numeroCalificaciones: Int!
  aprenderas: [String!]!
  objetivos: [String!]!
  dirigidoA: [String!]!
  modulos: [Modulo!]!
  fechaLanzamiento: DateTime
  categorias: [Categoria!]!
  cuestionarioId: Cuestionario
  deleted: Boolean!
}

"""Niveles de un curso"""
enum Nivel {
  Principiante
  Intermedio
  Avanzado
}

type UserRequest {
  _id: ID!
  roles: [RolEnumGql!]!
  iat: Int
  exp: Int
  email: String!
  email_verified: Boolean!
  firstName: String!
  lastName: String!
  picture: String
}

"""Roles disponibles para los usuarios"""
enum RolEnumGql {
  ESTUDIANTE
  INSTRUCTOR
  EDITOR
  ADMINISTRADOR
  SUPERADMIN
}

type deletedCountOutput {
  deletedCount: Float!
}

type Perfil {
  bio: String
  ubicacion: String
  celular: String
  fechaNacimiento: DateTime
  contacto: String
  intereses: [String!]
}

type Usuario {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  email_verified: Boolean!
  roles: [RolEnumGql!]!
  picture: String
  perfil: Perfil
  notificaciones: Boolean!
  cursosFavoritos: [Curso!]
  status: UserStatus!
  deleted: Boolean!
}

"""Estados de un usuario"""
enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
  SUSPENDED
}

type RespuestaPregunta {
  _id: ID!
  preguntaId: Pregunta!
  opcionIds: [Opcion!]
  respuestaAbierta: String
  deleted: Boolean!
}

type UsuarioOutput {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  email_verified: Boolean!
  roles: [RolEnumGql!]!
  picture: String
  perfil: Perfil
  notificaciones: Boolean!
  cursosFavoritos: [Curso!]
  status: UserStatus!
  deleted: Boolean!
}

type Comentario {
  _id: ID!
  usuarioId: Usuario!
  cursoId: Curso!
  comentario: String!
  fecha: DateTime!
  deleted: Boolean!
}

type UserJwtOutput {
  user: UserRequest!
  accessToken: String!
}

type Calificacion {
  _id: ID!
  usuarioId: ID!
  cursoId: ID!
  valor: Int!
  comentario: String
  fecha: DateTime!
  deleted: Boolean!
}

type Query {
  usuarios(offset: Int = 0, limit: Int = 10, search: String): [UsuarioOutput!]!
  usuarios_findAllByFirstname(search: String, offset: Int = 0, limit: Int = 10): [UsuarioOutput!]!
  usuarios_findAllBy(search: String, field: String, offset: Int = 0, limit: Int = 10): [UsuarioOutput!]!
  usuario(id: ID!): UsuarioOutput!

  """Obtiene una lista de usuarios filtrados por roles espec√≠ficos."""
  usuarios_findByRol(objetoRoles: RolesInput!): [UsuarioOutput!]!
  usuario_findByEmail(email: String!): UsuarioOutput!

  """Obtiene una lista de usuarios eliminados."""
  usuarios_findSoftDeleted(offset: Int = 0, limit: Int = 10): [UsuarioOutput!]!
  comentarios: [Comentario!]!
  comentario(id: ID!): Comentario!
  comentariosPorCurso(cursoId: ID!): [Comentario!]!
  comentariosPorUsuario(usuarioId: ID!): [Comentario!]!
  Cursos(offset: Int = 0, limit: Int = 10): [Curso!]!
  Curso_findAllByTitle(search: String, offset: Int = 0, limit: Int = 10): [Curso!]!
  Curso(id: ID!): Curso!
  Curso_findSoftDeleted(offset: Int = 0, limit: Int = 10): [Curso!]!
  Calificaciones(offset: Int = 0, limit: Int = 10): [Calificacion!]!
  Calificacion(id: ID!): Calificacion!
  Calificacion_findSoftDeleted(offset: Int = 0, limit: Int = 10): [Calificacion!]!
  Calificacion_promedioCalificaciones(cursoId: ID!): Float!
  Calificaciones_PorCurso(cursoId: ID!): [Calificacion!]!
  Calificaciones_PorUsuario(usuarioId: ID!): [Calificacion!]!
  categorias: [Categoria!]!
  categoria(id: ID!): Categoria!
}

input RolesInput {
  roles: [RolEnumGql!]
}

type Mutation {
  signup(createUsuarioInput: CreateUsuarioInput!): UsuarioOutput!
  login(loginUserInput: LoginUserInput!): UserRequest!
  sendVerificationEmailAgain: UserJwtOutput!
  updatePassword(updatePasswordInput: UpdatePasswordInput!): UsuarioOutput!
  requestPasswordReset(requestPasswordResetInput: RequestPasswordResetInput!): String!
  resetPassword(resetPasswordInput: ResetPasswordInput!): String!
  usuario_create(createUsuarioInput: CreateUsuarioInput!): UsuarioOutput!
  usuario_update_onlyUser(updateUsuarioInput: UpdateUsuarioInput!): UsuarioOutput!
  usuario_update_onlyAdmin(id: ID!, updateUsuarioInput: UpdateUsuarioInput!): UsuarioOutput!
  usuario_softDelete(idRemove: ID!): UsuarioOutput!
  usuario_restore(idRestore: ID!): UsuarioOutput!
  usuario_hardDelete(id: ID!): UsuarioOutput!
  usuarios_hardDeleteAllSoftDeleted: deletedCountOutput!
  createComentario(createComentarioInput: CreateComentarioInput!): Comentario!
  updateComentario(id: ID!, updateComentarioInput: UpdateComentarioInput!): Comentario!
  removeComentario(id: ID!): Comentario!
  Curso_create(createCursoInput: CreateCursoInput!): Curso!
  Curso_update(id: ID!, updateCursoInput: UpdateCursoInput!): Curso!
  Curso_softDelete(idRemove: ID!): Curso!
  Curso_hardDelete(id: ID!): Curso!
  Curso_hardDeleteAllSoftDeleted: deletedCountOutput!
  Curso_restore(idRestore: ID!): Curso!
  Calificacion_create(createCalificacionInput: CreateCalificacionUserInput!): Calificacion!
  Calificacion_update(id: ID!, updateCalificacionInput: UpdateCalificacionInput!): Calificacion!
  Calificacion_softDelete(idRemove: ID!): Calificacion!
  Calificacion_hardDelete(id: ID!): Calificacion!
  Calificacion_hardDeleteAllSoftDeleted: deletedCountOutput!
  Calificacion_restore(idRestore: ID!): Calificacion!
  createCategoria(createCategoriaInput: CreateCategoriaInput!): Categoria!
  updateCategoria(id: ID!, updateCategoriaInput: UpdateCategoriaInput!): Categoria!
  removeCategoria(id: ID!): Categoria!
}

input CreateUsuarioInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  picture: String
  perfil: CreatePerfilInput
  notificaciones: Boolean = true
}

input CreatePerfilInput {
  bio: String
  ubicacion: String
  celular: String
  fechaNacimiento: DateTime
  contacto: String
  intereses: [String!]
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

input UpdateUsuarioInput {
  firstName: String
  lastName: String
  picture: String
  perfil: CreatePerfilInput
  notificaciones: Boolean = true
  cursosFavoritos: [ID!]
}

input CreateComentarioInput {
  usuarioId: ID!
  cursoId: ID!
  comentario: String!
}

input UpdateComentarioInput {
  usuarioId: ID
  cursoId: ID
  comentario: String
}

input CreateCursoInput {
  titulo: String!
  descripcionCorta: String!
  descripcionLarga: String
  nivel: Nivel
  instructor: ID
  duracionHoras: Float
  imagenURL: String
  precio: Float
  currency: String
  descuento: Float
  aprenderas: [String!]
  objetivos: [String!]
  dirigidoA: [String!]
  modulos: [ID!]
  fechaLanzamiento: DateTime
  categorias: [ID!]
  cuestionarioId: ID
}

input UpdateCursoInput {
  titulo: String
  descripcionCorta: String
  descripcionLarga: String
  nivel: Nivel
  instructor: ID
  duracionHoras: Float
  imagenURL: String
  precio: Float
  currency: String
  descuento: Float
  aprenderas: [String!]
  objetivos: [String!]
  dirigidoA: [String!]
  modulos: [ID!]
  fechaLanzamiento: DateTime
  categorias: [ID!]
  cuestionarioId: ID
}

input CreateCalificacionUserInput {
  cursoId: ID!
  valor: Int!
  comentario: String
}

input UpdateCalificacionInput {
  usuarioId: ID
  cursoId: ID
  valor: Int
  comentario: String
}

input CreateCategoriaInput {
  nombre: String!
  descripcion: String
}

input UpdateCategoriaInput {
  nombre: String
  descripcion: String
}